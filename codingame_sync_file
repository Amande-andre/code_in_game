/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.hpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anmande <anmande@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/18 16:17:27 by anmande           #+#    #+#             */
/*   Updated: 2023/12/20 19:33:35 by anmande          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MAIN_HPP

#define MAIN_HPP

#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   drone.hpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: j <j@student.42.fr>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/18 17:36:03 by anmande           #+#    #+#             */
/*   Updated: 2023/12/26 11:17:20 by j                ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef DRONE_HPP

#define DRONE_HPP
#include <iostream>
#include <string>


class Drone
{
private:
    int _id;
    int _pos_x;
    int _pos_y;
    int _up;
    int _left;
    int _right;
    int _dodge;
	int	_light;
public:
    Drone();
    ~Drone();
    int _down;
    void setDrone(int x, int y, int id);
    void setDronePos(int x, int y);
    void setX(bool _bool);
    void setY(bool _bool);
    int  getX();
    int  getY();
	int	 getLight();
    void droneMvt();
    void mvtUp();
    void mvtDown();
    void mvtR();
    void mvtL();
    void lightOn();
};

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   creature.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anmande <anmande@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/19 17:16:58 by anmande           #+#    #+#             */
/*   Updated: 2023/12/22 15:21:27 by anmande          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef CREATURE_HPP

#define CREATURE_HPP

#include <string>

class Creature
{
private:
    int _creature_id;
    int _creature_type;
    int _creature_x;
    int _creature_y;
    int _creature_vx;
    int _creature_vy;
public:
    Creature();
    ~Creature();
    void   inst(int id, int type);
    void   setCreature(int x, int y, int vx, int vy);
    int    getId() const;
    int    getType() const;
    int    getX() const;
    int    getY() const;
    //int    getVector() const;
    
};




#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.hpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: j <j@student.42.fr>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/26 11:25:34 by j                 #+#    #+#             */
/*   Updated: 2023/12/26 15:51:25 by j                ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef UTILS_HPP

#define UTILS_HPP


void nearMonster(Creature Mstr, Drone drone);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: j <j@student.42.fr>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/18 16:16:07 by anmande           #+#    #+#             */
/*   Updated: 2023/12/26 15:50:37 by j                ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Score points by scanning valuable fish faster than your opponent.
 **/

int main()
{
    int creature_count;
    cin >> creature_count; cin.ignore();
    Creature net[creature_count + 1];
    for (int i = 0; i < creature_count; i++) {
        int creature_id;
        int color;
        int type;
        cin >> creature_id >> color >> type; cin.ignore();
        net[i].inst(creature_id, type);
    }
    // game loop
    
    Drone tab[2];
    while (1) {
        int my_score;
        cin >> my_score; cin.ignore();
        int foe_score;
        cin >> foe_score; cin.ignore();
        int my_scan_count;
        cin >> my_scan_count; cin.ignore();
        for (int i = 0; i < my_scan_count; i++) {
            int creature_id;
            cin >> creature_id; cin.ignore();
        }
        int foe_scan_count;
        cin >> foe_scan_count; cin.ignore();
        for (int i = 0; i < foe_scan_count; i++) {
            int creature_id;
            cin >> creature_id; cin.ignore();
        }
        int my_drone_count;
        cin >> my_drone_count; cin.ignore();
        //creer les drones ici;
        for (int i = 0; i < my_drone_count; i++) {
            int drone_id;
            int drone_x;
            int drone_y;
            int emergency;
            int battery;
            cin >> drone_id >> drone_x >> drone_y >> emergency >> battery; cin.ignore();
            tab[i].setDrone(drone_x, drone_y, drone_id);
        }
        int foe_drone_count;
        cin >> foe_drone_count; cin.ignore();
        for (int i = 0; i < foe_drone_count; i++) {
            int drone_id;
            int drone_x;
            int drone_y;
            int emergency;
            int battery;
            cin >> drone_id >> drone_x >> drone_y >> emergency >> battery; cin.ignore();  
        }
        int drone_scan_count;
        cin >> drone_scan_count; cin.ignore();
        for (int i = 0; i < drone_scan_count; i++) {
            int drone_id;
            int creature_id;
            cin >> drone_id >> creature_id; cin.ignore();
        }
        int visible_creature_count;
        cin >> visible_creature_count; cin.ignore();
        for (int i = 0; i < visible_creature_count; i++) {
            int creature_id;
            int creature_x;
            int creature_y;
            int creature_vx;
            int creature_vy;
            cin >> creature_id >> creature_x >> creature_y >>\
                creature_vx >> creature_vy; cin.ignore();
            // below reset creatures variables
            for (int j = 0; j < creature_count; j++)
            {
                if (net[j].getId() == creature_id)
				{
					net[j].setCreature(creature_x, \
						creature_y, creature_vx, creature_vy);
               		cerr << net[j].getId() << net[j].getType() << " x = " << net[j].getX() << endl;
					nearMonster(net[j], tab[0]);
					nearMonster(net[j], tab[1]);
				}
            }
        }
        int radar_blip_count;
        cin >> radar_blip_count; cin.ignore();
        for (int i = 0; i < radar_blip_count; i++) {
            int drone_id;
            int creature_id;
            string radar;
            cin >> drone_id >> creature_id >> radar; cin.ignore();
        }
        for (int i = 0; i < my_drone_count; i++) {

            // Write an action using cout. DON'T FORGET THE "<< endl"
            // To debug: cerr << "Debug messages..." << endl;
            tab[i].droneMvt();
            for (int j = 0; net[j].getType() == -1; j++)
            {
                cerr << net[j].getX() << "." << net[j].getY() << endl;
            }
            cout << "MOVE " << tab[i].getX() << " " << tab[i].getY() << " " << tab[i].getLight() << " " << tab[i].getLight() << endl; // MOVE <x> <y> <light (1|0)> | WAIT <light (1|0)>
        }
    }
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   drone.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: j <j@student.42.fr>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/18 17:35:27 by anmande           #+#    #+#             */
/*   Updated: 2023/12/26 11:45:23 by j                ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include <string>


Drone::Drone()
{
    this->_pos_x = 0;
    this->_pos_y = 0;
    this-> _up = 0;    
    this-> _down = 1;
    this-> _left = 1;
    this-> _right = 1;
	this-> _dodge = 0;
	this-> _light = 0;
}

Drone::~Drone()
{
}

void Drone::setDrone(int x, int y, int id) {
    _pos_x = x;
    _pos_y = y;
    _id = id;
}

int Drone::getX()
{
    return (this->_pos_x);
}

int Drone::getY()
{
    return (this->_pos_y);
}

int Drone::getLight()
{
	return (this->_light);
}

void Drone::setX(bool _bool)
{
    if (_bool)
        this->_pos_x += 400;
    else
        this->_pos_x -= 400;
}

void Drone::setY(bool _bool)
{
    if (_bool)
        this->_pos_y += 600;
    else
        this->_pos_y -= 600;
}

void Drone::mvtUp()
{
    Drone::setY(_down);
}
void Drone::mvtDown()
{
    if (this->_pos_y >= 8500){
        this->_down = 0;
    }
    else if (this->_pos_y <= 500)
        this->_down = 1;
    Drone::setY(this->_down);
}
void Drone::mvtR()
{
    if (_pos_x >= 5000)
        _right = 1;
    else if ((_pos_x < 5000))
        _right = 0;
    if (_pos_x >= 8500)
        _right = 0;
    else if (_pos_x <= 2500)
        _right = 1;
    Drone::setX(_right);
}
void Drone::mvtL()
{
    Drone::setY(false);
}
void Drone::droneMvt()
{
    mvtDown();
    //mvtR();
    // if (this->_left)
    //     setX(true);
}

void Drone::lightOn()
{
    if (this->_pos_y >= 7500 && this->_pos_y <= 6900)
        this->_light = 1;
    if (this->_pos_y >= 4000 && this->_pos_y <= 4500)
        this->_light = 1;
    this->_light = 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   creature.cpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anmande <anmande@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/19 17:16:42 by anmande           #+#    #+#             */
/*   Updated: 2023/12/22 15:30:14 by anmande          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


Creature::Creature()
{
}

Creature::~Creature()
{
}

void Creature::inst(int id, int type)
{   
    this->_creature_id = id;
    this->_creature_type = type;
}

void Creature::setCreature(int x, int y, int vx, int vy)
{
    _creature_x = x;
    _creature_y = y;
    _creature_vx = vx;
    _creature_vy = vy;
}

int Creature::getId() const
{
    return (_creature_id);
}

int Creature::getType() const
{
    return (_creature_type);
}

int Creature::getX() const 
{
    return (_creature_x);
}

int Creature::getY() const 
{
    return (_creature_y);
}

// const int Creature::getVector()
// {
//     return(->_creature_)
// }/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: j <j@student.42.fr>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/26 11:23:50 by j                 #+#    #+#             */
/*   Updated: 2023/12/26 15:51:09 by j                ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


void nearMonster(Creature Mstr, Drone drone)
{
	int min;
	int max;
	if (Mstr.getType() == -1)
	{
		if (Mstr.getX() < drone.getX())
		{
			min = Mstr.getX();
			max = drone.getX();
		}
		else
		{
			max = Mstr.getX();
			min = drone.getX();
		}
		if (max - min <= 500)
		{
			std::cerr << "troubles" << std::endl;
		}
	}
}
